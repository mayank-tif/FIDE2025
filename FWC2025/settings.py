"""
Django settings for FWC2025 project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import logging
from . import env_details as env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h#gi04fmlis$$oxdo%jbn-39pf$_m-7b@d9oyvxxqhz14!+=(f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
CORS_ORIGIN_ALLOW_ALL = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'fwc',
    'rest_framework_simplejwt',
    'MAppApis',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'fwc.middleware.CustomSessionMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'fwc.middleware.SessionCheckByMiddleware',
    'fwc.middleware.DomainRedirectMiddleware',
    'fwc.middleware.RoleBasedAccessMiddleware',
]


ROOT_URLCONF = 'FWC2025.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,"Templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FWC2025.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'fide2025',
        'USER': 'mayank', 
        'PASSWORD': 'TagNpaydbMA@2o25',
        'HOST': '10.0.23.33', 
        'PORT': '21446',
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

#STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#STATICFILES_DIRS = [
#    BASE_DIR / "static"
#]

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

STATIC_ROOT = BASE_DIR / 'staticfiles'  # Add this line

STATIC_URL = 'static/'


# Base url to serve media files
MEDIA_URL = '/media/'

# Path where media is stored'
#MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Set session to expire when the user closes the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Set session timeout to 30 minutes (optional)
SESSION_COOKIE_AGE = 172800  # 1800 seconds = 30 minutes
SESSION_SAVE_EVERY_REQUEST = True   # Refresh session on every request

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # Correct backend for python-memcached
        'LOCATION': '127.0.0.1:8000',  # Memcached server address
        'TIMEOUT': 600,  # Cache timeout in seconds (10 minutes)
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        ),
    'EXCEPTION_HANDLER': 'MAppApis.exceptions.custom_exception_handler',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'schedule_formatter': {
            'format': os.getenv('SCHEDULE_LOG_FILE_FORMAT', '%(asctime)s %(name)s - %(levelname)s - %(message)s'),
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',  # Log only errors
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django_errors.log'),  # Save in logs directory
            'formatter': 'verbose',
        },
        'schedule_file': {
            'level': os.getenv('SCHEDULE_LOGGING_LEVEL', 'INFO'),
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', os.getenv('SCHEDULE_LOG_FILE_NAME', 'schedulers.log')),
            'formatter': 'schedule_formatter',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',  # Log only errors and higher levels
            'propagate': True,
        },
        os.getenv('SCHEDULE_LOGGER_NAME', 'scheduler_logs_data'): {
            'handlers': ['schedule_file'],
            'level': os.getenv('SCHEDULE_LOGGING_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'info@fwc2025.in' 
EMAIL_HOST_PASSWORD = 'fmds vuam uegi ybul'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

TYPE = env.TYPE
PROJECT_ID=env.PROJECT_ID
PRIVATE_KEY_ID=env.PRIVATE_KEY_ID
PRIVATE_KEY=env.PRIVATE_KEY
CLIENT_EMAIL=env.CLIENT_EMAIL
CLIENT_ID=env.CLIENT_ID
AUTH_URL=env.AUTH_URL
TOKEN_URL=env.TOKEN_URL
AUTH_PROVIDER_X509_CERT_URL=env.AUTH_PROVIDER_X509_CERT_URL
CLIENT_X509_CERT_URL=env.CLIENT_X509_CERT_URL
UNIVERSE_DOMAIN=env.UNIVERSE_DOMAIN
NOTIFICATION_STATUS = env.NOTIFICATION_STATUS

FIREBASE_CONFIG = {
  "apiKey": "AIzaSyCVm-LVCLvmc2EGqg_oM8Q-hm2iHKSZfA0",
  "authDomain": "fwc2025-6bb44.firebaseapp.com",
  "projectId": "fwc2025-6bb44",
  "storageBucket": "fwc2025-6bb44.firebasestorage.app",
  "messagingSenderId": "939011673539",
  "appId": "1:939011673539:web:07c0dad05bbb2a2e0a0176",
  "measurementId": "G-YST4RC03W0"
}

FIREBASE_VAPID_KEY='BGpDjddJlH85DBlGE5Kmvoq2Lxd25TESBkhzdK5RnHWojB5Akbtg1f5qXGUBz5_I8bxtaLrwuM_tClIW8j-hMME'